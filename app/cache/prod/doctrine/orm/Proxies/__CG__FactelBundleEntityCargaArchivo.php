<?php

namespace Proxies\__CG__\FactelBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CargaArchivo extends \FactelBundle\Entity\CargaArchivo implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'FactelBundle\\Entity\\CargaArchivo' . "\0" . 'id', '' . "\0" . 'FactelBundle\\Entity\\CargaArchivo' . "\0" . 'type', 'dirArchivo', 'estado', 'procesoAutomatico', 'inicioProcesamiento', 'finProcesamiento', 'errors', 'emisor', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'deletedBy'];
        }

        return ['__isInitialized__', '' . "\0" . 'FactelBundle\\Entity\\CargaArchivo' . "\0" . 'id', '' . "\0" . 'FactelBundle\\Entity\\CargaArchivo' . "\0" . 'type', 'dirArchivo', 'estado', 'procesoAutomatico', 'inicioProcesamiento', 'finProcesamiento', 'errors', 'emisor', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'deletedBy'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CargaArchivo $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setDirArchivo($dirArchivo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDirArchivo', [$dirArchivo]);

        return parent::setDirArchivo($dirArchivo);
    }

    /**
     * {@inheritDoc}
     */
    public function getDirArchivo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDirArchivo', []);

        return parent::getDirArchivo();
    }

    /**
     * {@inheritDoc}
     */
    public function setEstado($estado)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEstado', [$estado]);

        return parent::setEstado($estado);
    }

    /**
     * {@inheritDoc}
     */
    public function getEstado()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEstado', []);

        return parent::getEstado();
    }

    /**
     * {@inheritDoc}
     */
    public function setProcesoAutomatico($procesoAutomatico)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProcesoAutomatico', [$procesoAutomatico]);

        return parent::setProcesoAutomatico($procesoAutomatico);
    }

    /**
     * {@inheritDoc}
     */
    public function getProcesoAutomatico()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProcesoAutomatico', []);

        return parent::getProcesoAutomatico();
    }

    /**
     * {@inheritDoc}
     */
    public function setInicioProcesamiento($inicioProcesamiento)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInicioProcesamiento', [$inicioProcesamiento]);

        return parent::setInicioProcesamiento($inicioProcesamiento);
    }

    /**
     * {@inheritDoc}
     */
    public function getInicioProcesamiento()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInicioProcesamiento', []);

        return parent::getInicioProcesamiento();
    }

    /**
     * {@inheritDoc}
     */
    public function setFinProcesamiento($finProcesamiento)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFinProcesamiento', [$finProcesamiento]);

        return parent::setFinProcesamiento($finProcesamiento);
    }

    /**
     * {@inheritDoc}
     */
    public function getFinProcesamiento()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinProcesamiento', []);

        return parent::getFinProcesamiento();
    }

    /**
     * {@inheritDoc}
     */
    public function addError(\FactelBundle\Entity\CargaError $error)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addError', [$error]);

        return parent::addError($error);
    }

    /**
     * {@inheritDoc}
     */
    public function removeError(\FactelBundle\Entity\CargaError $error)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeError', [$error]);

        return parent::removeError($error);
    }

    /**
     * {@inheritDoc}
     */
    public function getErrors()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getErrors', []);

        return parent::getErrors();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmisor(\FactelBundle\Entity\Emisor $emisor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmisor', [$emisor]);

        return parent::setEmisor($emisor);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmisor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmisor', []);

        return parent::getEmisor();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function updateTimestamps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateTimestamps', []);

        return parent::updateTimestamps();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$user]);

        return parent::setCreatedBy($user);
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedBy($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', [$user]);

        return parent::setUpdatedBy($user);
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedBy($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedBy', [$user]);

        return parent::setDeletedBy($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedBy', []);

        return parent::getDeletedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function isBlameable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBlameable', []);

        return parent::isBlameable();
    }

}
